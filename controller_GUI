classdef controller < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                       matlab.ui.Figure
        GridLayout                     matlab.ui.container.GridLayout
        LeftPanel                      matlab.ui.container.Panel
        EmergencyStopButton            matlab.ui.control.Button
        RunFunctionButton              matlab.ui.control.Button
        FUNctionSelectorLabel          matlab.ui.control.Label
        ConnectButton                  matlab.ui.control.Button
        EnterRVIDEditField             matlab.ui.control.EditField
        EnterRVIDEditFieldLabel        matlab.ui.control.Label
        DropDown                       matlab.ui.control.DropDown
        CenterPanel                    matlab.ui.container.Panel
        ControlsLabel                  matlab.ui.control.Label
        RotateRight90degreesButton     matlab.ui.control.Button
        RotateLeft90degreesButton      matlab.ui.control.Button
        GoBackwardsforOneSecondButton  matlab.ui.control.Button
        GoForwardforOneSecondButton    matlab.ui.control.Button
        RightPanel                     matlab.ui.container.Panel
        Image                          matlab.ui.control.Image
        EventLogTextArea               matlab.ui.control.TextArea
        EventLogTextAreaLabel          matlab.ui.control.Label
    end

    % Properties that correspond to apps with auto-reflow
    properties (Access = private)
        onePanelWidth = 576;
        twoPanelWidth = 768;
    end

    

    properties (Access = private)
        rover = nan % Sphero Robot
        norv = 'No Rover Connected' % error message
        fnselect = 'stopwall' % starting function value
        consoleData = ["~~~~~~~~~~~~~~~~~";"Begin Event Log";strings(18,1)]; % Event log data
        img;
    end
    
    methods (Access = private)

        function myphoto(app)
            app.updateConsole('Taking Picture'); 
            imwrite(app.rover.getImage(),'feed.bmp');
            pause(1)
            app.img = imread('feed.bmp');
            pause(.5)
            app.Image.ImageSource = app.img;
            pause(.5)
            app.updateConsole('Picture Displayed')
        end

        % Updates the log
        function [] = updateConsole(app, update)
            app.consoleData = circshift(app.consoleData,1);
            app.consoleData(1) = update;
            app.EventLogTextArea.Value = app.consoleData;
        end
        
        function stopwall(app)
            % moves the robot forward for 20 seconds, but stops if a wall is
            % encounterd
            % input: sphero
            % output: None
            
            app.rover.setDriveSpeed(60) % set drive speed
            pause(0.5)
            tstart = tic; %initiate timer
            while toc(tstart) < 20 %run while loop for 20 seconds
                if app.rover.getDistance() < 25  %if distance of object from distance sensor is less than 25 inches
                    app.updateConsole('I stopped so that I didnt hit a wall!') %indicates that robot stopped due to sensing something in front of it
                    app.rover.stop %stops the robot
                    return;
                end
            end
            app.updateConsole('I did not see a wall, but I stopped because too much time passed!') %indicates that the robot stoped because the time ran out
            app.rover.stop %stops the robot
        end

        function yellowDriver(app)
                % moves the robot forward for 120 seconds, but stops and spins the
                % robot if a yellow color is detected
                % input: sphero
                % output: None
            
            app.rover.resetHeading
            tstart = tic; %initializes timer
            while toc(tstart) < 120 %runs loop for 120 seconds
                app.rover.setDriveSpeed(60) %sets vehicle to drive forward
                ColorSensor = app.rover.getDetectedColor; %detects color from sensor on bot
                R = ColorSensor.R; %assigns RGB values in ColorSensor to variables R for red, G for green, and B for blue
                G = ColorSensor.G;
                B = ColorSensor.B;
                pause(0.2)
            
                if R > 150 && G > 150 && B < 90 % determines if RGB values are withing a range of a yellow color
                    app.updateConsole('I See Yellow!')
                    app.rover.turnAngle(179) % turns the robot around. it is less than 180 degrees to ensure robot takes a circular path
                        % if the turn angle was 180 the robot might turn in the wrong
                        % direction because it will always turn the shortest distance to
                        % the called angle and since 180 is equidistant from 0 to 360 the
                        % robot would sometimes do a half turn to 180 and then turn back
                        % the same way instead of spinning
                    pause(2) % gives the robot time to turn
                    app.rover.resetHeading %resets heading of the robot so it can complete the spin
                    pause(.5)
                    app.rover.turnAngle(179) % turns the robot back to start position
                    pause(5)
                    break;
                end
            end
            app.rover.stop % stops the robot
        end



    end
    

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: EmergencyStopButton
        function EmergencyStopButtonPushed(app, event)
            try
                %app.rover.stop 
                app.rover.stop;
                warndlg('Rover Stopped');
                app.updateConsole('Rover stopped');
                return;
            catch
                warndlg(app.norv);
            end
        end

        % Button pushed function: ConnectButton
        function ConnectButtonPushed(app, event)
            RVID = app.EnterRVIDEditField.Value;
            app.updateConsole('Connecting...')
            try
                app.rover = sphero(RVID);
                warndlg('Rover Connected');
                app.updateConsole('Rover Connected')
                pause(5)
            catch
                warndlg('Please Enter The Sphero ID')
                app.updateConsole('Failed to connect please try again')
            end
        end

        % Button pushed function: GoForwardforOneSecondButton
        function GoForwardforOneSecondButtonPushed(app, event)
                app.rover.setDriveSpeed(60)
                app.updateConsole('Driving Forward')
                pause(1.0)
                app.rover.stop;
        end

        % Value changed function: DropDown
        function DropDownValueChanged(app, event)
            value = app.DropDown.Value;
            app.fnselect = value;
        end

        % Button pushed function: RunFunctionButton
        function RunFunctionButtonPushed(app, event)
            try
            
                switch app.fnselect
                    case 'Take Photo'
                        app.myphoto()
                    case 'stopwall'
                        app.stopwall()
                    case 'yellowDriver'
                        app.yellowDriver()
                end
            catch
                warndlg(app.norv)
            end
        end

        % Button pushed function: GoBackwardsforOneSecondButton
        function GoBackwardsforOneSecondButtonPushed(app, event)
            %app.drvspd = app.DriveSpeedSlider.Value;
            %app.rover.setDriveSpeed(app.drvspd)
            app.rover.setDriveSpeed(-60)
            app.updateConsole('Driving Backwards')
            pause(1.0)
            app.rover.stop;
        end

        % Button pushed function: RotateLeft90degreesButton
        function RotateLeft90degreesButtonPushed(app, event)
            app.updateConsole('Turning Left')
            app.rover.resetHeading
            pause(.5)
            app.rover.turnAngle(90)
            pause(1)
        end

        % Button pushed function: RotateRight90degreesButton
        function RotateRight90degreesButtonPushed(app, event)
            app.updateConsole('Turning Right')
            app.rover.resetHeading
            pause(.5)
            app.rover.turnAngle(-90)
            pause(1)
        end

        % Changes arrangement of the app based on UIFigure width
        function updateAppLayout(app, event)
            currentFigureWidth = app.UIFigure.Position(3);
            if(currentFigureWidth <= app.onePanelWidth)
                % Change to a 3x1 grid
                app.GridLayout.RowHeight = {480, 480, 480};
                app.GridLayout.ColumnWidth = {'1x'};
                app.CenterPanel.Layout.Row = 1;
                app.CenterPanel.Layout.Column = 1;
                app.LeftPanel.Layout.Row = 2;
                app.LeftPanel.Layout.Column = 1;
                app.RightPanel.Layout.Row = 3;
                app.RightPanel.Layout.Column = 1;
            elseif (currentFigureWidth > app.onePanelWidth && currentFigureWidth <= app.twoPanelWidth)
                % Change to a 2x2 grid
                app.GridLayout.RowHeight = {480, 480};
                app.GridLayout.ColumnWidth = {'1x', '1x'};
                app.CenterPanel.Layout.Row = 1;
                app.CenterPanel.Layout.Column = [1,2];
                app.LeftPanel.Layout.Row = 2;
                app.LeftPanel.Layout.Column = 1;
                app.RightPanel.Layout.Row = 2;
                app.RightPanel.Layout.Column = 2;
            else
                % Change to a 1x3 grid
                app.GridLayout.RowHeight = {'1x'};
                app.GridLayout.ColumnWidth = {220, '1x', 220};
                app.LeftPanel.Layout.Row = 1;
                app.LeftPanel.Layout.Column = 1;
                app.CenterPanel.Layout.Row = 1;
                app.CenterPanel.Layout.Column = 2;
                app.RightPanel.Layout.Row = 1;
                app.RightPanel.Layout.Column = 3;
            end
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.AutoResizeChildren = 'off';
            app.UIFigure.Position = [100 100 860 480];
            app.UIFigure.Name = 'MATLAB App';
            app.UIFigure.SizeChangedFcn = createCallbackFcn(app, @updateAppLayout, true);

            % Create GridLayout
            app.GridLayout = uigridlayout(app.UIFigure);
            app.GridLayout.ColumnWidth = {220, '1x', 220};
            app.GridLayout.RowHeight = {'1x'};
            app.GridLayout.ColumnSpacing = 0;
            app.GridLayout.RowSpacing = 0;
            app.GridLayout.Padding = [0 0 0 0];
            app.GridLayout.Scrollable = 'on';

            % Create LeftPanel
            app.LeftPanel = uipanel(app.GridLayout);
            app.LeftPanel.Layout.Row = 1;
            app.LeftPanel.Layout.Column = 1;

            % Create DropDown
            app.DropDown = uidropdown(app.LeftPanel);
            app.DropDown.Items = {'stopwall', 'yellowDriver', 'Take Photo', ''};
            app.DropDown.ValueChangedFcn = createCallbackFcn(app, @DropDownValueChanged, true);
            app.DropDown.Position = [60 280 100 22];
            app.DropDown.Value = 'stopwall';

            % Create EnterRVIDEditFieldLabel
            app.EnterRVIDEditFieldLabel = uilabel(app.LeftPanel);
            app.EnterRVIDEditFieldLabel.HorizontalAlignment = 'right';
            app.EnterRVIDEditFieldLabel.Position = [11 415 69 22];
            app.EnterRVIDEditFieldLabel.Text = 'Enter RV ID';

            % Create EnterRVIDEditField
            app.EnterRVIDEditField = uieditfield(app.LeftPanel, 'text');
            app.EnterRVIDEditField.Position = [95 415 100 22];

            % Create ConnectButton
            app.ConnectButton = uibutton(app.LeftPanel, 'push');
            app.ConnectButton.ButtonPushedFcn = createCallbackFcn(app, @ConnectButtonPushed, true);
            app.ConnectButton.Position = [60 378 100 22];
            app.ConnectButton.Text = 'Connect';

            % Create FUNctionSelectorLabel
            app.FUNctionSelectorLabel = uilabel(app.LeftPanel);
            app.FUNctionSelectorLabel.Position = [60 317 103 22];
            app.FUNctionSelectorLabel.Text = 'FUNction Selector';

            % Create RunFunctionButton
            app.RunFunctionButton = uibutton(app.LeftPanel, 'push');
            app.RunFunctionButton.ButtonPushedFcn = createCallbackFcn(app, @RunFunctionButtonPushed, true);
            app.RunFunctionButton.Position = [60 242 100 22];
            app.RunFunctionButton.Text = 'Run Function';

            % Create EmergencyStopButton
            app.EmergencyStopButton = uibutton(app.LeftPanel, 'push');
            app.EmergencyStopButton.ButtonPushedFcn = createCallbackFcn(app, @EmergencyStopButtonPushed, true);
            app.EmergencyStopButton.Position = [60 95 104 22];
            app.EmergencyStopButton.Text = 'Emergency Stop';

            % Create CenterPanel
            app.CenterPanel = uipanel(app.GridLayout);
            app.CenterPanel.Layout.Row = 1;
            app.CenterPanel.Layout.Column = 2;

            % Create GoForwardforOneSecondButton
            app.GoForwardforOneSecondButton = uibutton(app.CenterPanel, 'push');
            app.GoForwardforOneSecondButton.ButtonPushedFcn = createCallbackFcn(app, @GoForwardforOneSecondButtonPushed, true);
            app.GoForwardforOneSecondButton.Position = [127 301 167 78];
            app.GoForwardforOneSecondButton.Text = 'Go Forward for One Second';

            % Create GoBackwardsforOneSecondButton
            app.GoBackwardsforOneSecondButton = uibutton(app.CenterPanel, 'push');
            app.GoBackwardsforOneSecondButton.ButtonPushedFcn = createCallbackFcn(app, @GoBackwardsforOneSecondButtonPushed, true);
            app.GoBackwardsforOneSecondButton.Position = [120 147 181 80];
            app.GoBackwardsforOneSecondButton.Text = 'Go Backwards for One Second';

            % Create RotateLeft90degreesButton
            app.RotateLeft90degreesButton = uibutton(app.CenterPanel, 'push');
            app.RotateLeft90degreesButton.ButtonPushedFcn = createCallbackFcn(app, @RotateLeft90degreesButtonPushed, true);
            app.RotateLeft90degreesButton.Position = [42 226 138 76];
            app.RotateLeft90degreesButton.Text = 'Rotate Left 90 degrees';

            % Create RotateRight90degreesButton
            app.RotateRight90degreesButton = uibutton(app.CenterPanel, 'push');
            app.RotateRight90degreesButton.ButtonPushedFcn = createCallbackFcn(app, @RotateRight90degreesButtonPushed, true);
            app.RotateRight90degreesButton.Position = [236 226 146 76];
            app.RotateRight90degreesButton.Text = 'Rotate Right 90 degrees';

            % Create ControlsLabel
            app.ControlsLabel = uilabel(app.CenterPanel);
            app.ControlsLabel.Position = [185 415 50 22];
            app.ControlsLabel.Text = 'Controls';

            % Create RightPanel
            app.RightPanel = uipanel(app.GridLayout);
            app.RightPanel.Layout.Row = 1;
            app.RightPanel.Layout.Column = 3;

            % Create EventLogTextAreaLabel
            app.EventLogTextAreaLabel = uilabel(app.RightPanel);
            app.EventLogTextAreaLabel.HorizontalAlignment = 'right';
            app.EventLogTextAreaLabel.Position = [80 415 59 22];
            app.EventLogTextAreaLabel.Text = 'Event Log';

            % Create EventLogTextArea
            app.EventLogTextArea = uitextarea(app.RightPanel);
            app.EventLogTextArea.Position = [6 211 208 203];

            % Create Image
            app.Image = uiimage(app.RightPanel);
            app.Image.Position = [6 16 208 181];

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = controller

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end
